# /********************************************************************************
# * Copyright (c) 2021 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Eclipse Public License 2.0 which is available at
# * http://www.eclipse.org/legal/epl-2.0
# *
# * SPDX-License-Identifier: EPL-2.0
# ********************************************************************************/


# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vehicleapi_pb2 as vehicleapi__pb2


class SeatControllerStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetPosition = channel.unary_unary(
                                               '/vehicleapi.SeatController/SetPosition',
                                               request_serializer=vehicleapi__pb2.SetPositionRequest.SerializeToString,
                                               response_deserializer=vehicleapi__pb2.SetPositionResponse.FromString,
                                               )


class SeatControllerServicer(object):
    """The greeting service definition.
    """

    def SetPosition(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SeatControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
                        'SetPosition': grpc.unary_unary_rpc_method_handler(
                                servicer.SetPosition,
                                request_deserializer=vehicleapi__pb2.SetPositionRequest.FromString,
                                response_serializer=vehicleapi__pb2.SetPositionResponse.SerializeToString,
                        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vehicleapi.SeatController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class SeatController(object):
    """The greeting service definition.
    """

    @staticmethod
    def SetPosition(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vehicleapi.SeatController/SetPosition',
                                             vehicleapi__pb2.SetPositionRequest.SerializeToString,
                                             vehicleapi__pb2.SetPositionResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
