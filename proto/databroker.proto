syntax = "proto3";

import "google/protobuf/timestamp.proto";

package swdc;

service VehicleData
{
    rpc GetDatapoints(GetDatapointsRequest) returns (GetDatapointsReply);
    rpc Subscribe(SubscribeRequest) returns (stream Notification);

    rpc GetMetadata(GetMetadataRequest) returns (GetMetadataReply);
    // rpc SubscribeMetadata(SubscribeMetadataRequest)
}



service VehicleDataReceiver {
    rpc StreamingSet(stream SetPropertyRequest) returns (SetPropertyReply);

    //rpc ProvideData(stream DataBatch) returns (stream ProviderConfiguration);
    //rpc RegisterDatapoints(Metadata)
}



message GetDatapointsRequest {
    // A list of data points to be requested.
    // The ids of the data points have to be determined by calling GetMetadata().
    repeated int32 ids = 1;
}

message GetDatapointsReply {
    // Contains the values of the requested data points. The order of datapoints preserves that of the request.
    // If a requested data point not available (temporary or removed permanently), the corresponding Datapoint 
    // message will have the respective failure value set.
    repeated Datapoint datapoints = 1;
}



message SubscribeRequest {
    // A list of data points to be subscribed.
    // The ids of the data points have to be determined by calling GetMetadata().
    repeated int32 ids = 1;
    // Currently ignored, should contain some maybe json like structure defining the ruleset.
    // If empty or not set, as default rule a notification is issued when one of the referenced data points is changed.
    string rule = 2;
}

message Notification {
    // Contains the values of the subscribed data points. The order of datapoints preserves that of the request.
    // If a requested data point not available (temporary or removed permanently), the corresponding Datapoint 
    // message will have the respective failure value set.
    repeated Datapoint datapoints = 1;
}



message GetMetadataRequest {
    // Request metadata for a list of data points referenced by their names, e.g.
    // "Vehicle.Cabin.Seat.Row1.Pos1.Position" or "Vehicle.Speed".
    // If no property names provided, returns metadata for all known data points
    repeated string names = 1;
}

message GetMetadataReply {
    // Contains metadata of the requested data points. The order of datapoints preserves that of the request.
    // If a data point is not existing (i.e. not known to the Data Broker), no Metadata message is contained 
    // in the list.
    repeated Metadata list = 1;
}



message Metadata {
    // Id to be used in "get" and "subscribe" requests. Ids stay valid during one power cycle, only.
    int32             id                  = 1;
    // int32             access              = 2;
    // int32             change_mode         = 3;
    ValueType         value_type          = 4;
    string            name                = 5;
    // int32             config_flags        = 7;
    // repeated int32    config_array        = 8;
    // string            config_string       = 9;
    // float             min_sample_rate     = 10;
    // float             max_sample_rate     = 11;
};

enum ValueType {
    UNKNOWN = 0;
    BOOL = 6;
    INT32 = 7;
    INT64 = 8;
    UINT32 = 9;
    UINT64 = 10;
    SINT32 = 11;
    SINT64 = 12;
    FLOAT = 13;
    FIXED32 = 14;
    SFIXED32 = 15;
    DOUBLE = 16;
    FIXED64 = 17;
    SFIXED64 = 18;
    STRING = 19;
    BYTES = 20;
}



/*
message Branch {
    repeated Leaf leaves = 1;
    repeated Branch branches = 2;
}
*/

message Datapoint {
    // common data
    int32 id                             = 1;
    google.protobuf.Timestamp timestamp  = 2;

    // values
    oneof value {
        Failure failure_value    = 5;
        bool bool_value          = 6;
        int32 int32_value        = 7;
        int64 int64_value        = 8;
        uint32 uint32_value      = 9;
        uint64 uint64_value      = 10;
        sint32 sint32_value      = 11;
        sint64 sint64_value      = 12;
        float float_value        = 13;
        fixed32 fixed32_value    = 14;
        sfixed32 sfixed32_value  = 15;
        double double_value      = 16;
        fixed64 fixed64_value    = 17;
        sfixed64 sfixed64_value  = 18;
        string string_value      = 19;
        bytes bytes_value        = 20;
    }
    enum Failure {
        /** The data point is available but does not have a vaild/known value */
        INVALID = 0;
        /** Datapoint temporary not availabe. */
        TRY_AGAIN = 1;
        /**
         * This code must be returned when device that associated with the vehicle
         * data point is not available. For example, when client tries to set HVAC
         * temperature when the whole HVAC unit is turned OFF.
         */
        NOT_AVAILABLE = 2;
        /** Access denied */
        ACCESS_DENIED = 3;
        /** Something unexpected has happened in Data Broker */
        INTERNAL_ERROR = 4;
    }
}

message SetPropertyRequest {
    Datapoint value = 1;
}

message SetPropertyReply {
    PropertyStatus status = 1;
}

enum PropertyStatus {
    OK = 0;
    /** Try again. */
    TRY_AGAIN = 1;
    /** Invalid argument provided. */
    INVALID_ARG = 2;
    /**
     * This code must be returned when device that associated with the vehicle
     * property is not available. For example, when client tries to set HVAC
     * temperature when the whole HVAC unit is turned OFF.
     */
    NOT_AVAILABLE = 3;
    /** Access denied */
    ACCESS_DENIED = 4;
    /** Something unexpected has happened in Vehicle HAL */
    INTERNAL_ERROR = 5;
}