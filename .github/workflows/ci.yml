# /********************************************************************************
# * Copyright (c) 2021 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Eclipse Public License 2.0 which is available at
# * http://www.eclipse.org/legal/epl-2.0
# *
# * SPDX-License-Identifier: EPL-2.0
# ********************************************************************************/

name: CI workflow

on:
  workflow_dispatch:
  push:
    # Run only on branches/commits and not tags
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: Run unit tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check Docker version
        run: docker --version

      - name: Install Dapr
        uses: dapr/setup-dapr@v1
        with:
          version: "1.4.0"

      - name: Initialize Dapr
        shell: pwsh
        run: |
          Write-Output "::group::dapr init"
          dapr init
          Write-Output "::endgroup::"
          dapr --version

      - name: Initialize vehicleApp projects
        shell: pwsh
        run: |
          Write-Output "::group::Initialize vehicleApp"
          Import-Module ./.sdv/Sdv.psm1 -Force
          Find-SdvVehicleApp | Get-SdvComponent | Initialize-SdvComponent -Verbose
          Write-Output "::endgroup::"

      - name: Start mqtt
        shell: bash
        run: docker run -d -p 1883:1883 -p 9001:9001 eclipse-mosquitto:1.6.9

      - name: unit test
        shell: bash
        run: |
          pip install pytest
          pytest --rootdir . --override-ini junit_family=xunit1 --junit-xml=./.sdv/tmp/UnitTest/SeatAdjuster.xml ./src

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ./.sdv/tmp/UnitTest/SeatAdjuster.xml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: github-repository-name-case-adjusted
        name: Prepare repository name in lower case for docker upload. This supports repository names in mixed case
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}
          
      # - name: Build multi-arch image
      #   id: image_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     pull: true
      #     push: false
      #     outputs: |
      #       type=oci,dest=./vapp-container-image.tar
      #     context: .
      #     file: src/Dockerfile
      #     platforms: linux/amd64,linux/arm64
      #     labels: |
      #       org.opencontainers.image.source=https://github.com/${{steps.github-repository-name-case-adjusted.outputs.lowercase}}
               
      - name: Build image
        shell: pwsh
        env:
          VAPP_VERSION: ${{ github.sha }}
          GIT_HUB_REPOSITORY_NAME_LOWER_CASE: ${{ steps.github-repository-name-case-adjusted.outputs.lowercase }}
        run: |
          Import-Module ./.sdv/Sdv.psm1 -force
          foreach($Component in (Find-SdvVehicleApp | Get-SdvComponent)) {
            $ImageName = $Component.Name
            Write-Output ("::group::Building image '{0}'" -f $ImageName)
          
            $DockerFile = Join-Path $Component.Folder -ChildPath "Dockerfile"
            $DockerFolder = $Component.DockerFolder
            Write-Output ("Building image '{0}' from folder '{1}' with docker file '{2}'" -f $ImageName, $DockerFolder $DockerFile)
            docker build -t $ImageName -f $DockerFile $DockerFolder

            Write-Output "Listing image"
            docker image list

            Write-Output ("Getting id of '{0}'" -f $ImageName)
            $ID = docker images $ImageName -q
            Write-Output ("Selected id '{0}'" -f $ID)

            $GHCRPath = "ghcr.io/$env:GIT_HUB_REPOSITORY_NAME_LOWER_CASE/${ImageName}:$env:VAPP_VERSION"
            Write-Output ("Tagging '{0}'' with '{1}'" -f $ID, $GHCRPath)
            docker tag $ID $GHCRPath 

            Write-Output ("Pushing '{0}'" -f $GHCRPath)
            docker push $GHCRPath 
            Write-Output "::endgroup::"
          }


      - name: Test SeatAdjuster vehicleApp 
        shell: pwsh
        run: .sdv/Test-SdvVehicleApp.ps1 

